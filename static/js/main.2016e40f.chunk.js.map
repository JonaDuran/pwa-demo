{"version":3,"sources":["db.js","useCountries.js","App.js","serviceWorker.js","index.js"],"names":["db","Dexie","version","stores","countries","a","navigator","onLine","fetch","res","json","saveCountries","toArray","clear","bulkAdd","console","log","useCountries","useState","loading","data","state","setState","useEffect","loadCountries","then","search","event","val","text","currentTarget","value","where","startsWithIgnoreCase","or","result","CountriesTable","map","country","i","key","region","name","capital","App","className","placeholder","onChange","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2016e40f.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('pwa-demo');\ndb.version(1).stores({\n    countries: '++id, numericCode, name, capital, region, *altSpellings'\n});\n\nexport default db;","import { useState, useEffect } from 'react';\nimport db from './db'\n\nfunction useCountries() {\n  const [state, setState] = useState({\n    loading: true,\n    data: []\n  })\n\n  useEffect(() => {\n    loadCountries().then(countries => {\n      setState({\n        loading: false,\n        data: countries\n      })\n    })\n  }, [])\n\n  const search = async (event, val) => {\n    const text = event.currentTarget.value || ''\n\n    const result = await db.countries\n      .where('name')\n      .startsWithIgnoreCase(text)\n      .or('region')\n      .startsWithIgnoreCase(text)\n      .or('capital')\n      .startsWithIgnoreCase(text)\n      .toArray()\n\n    setState({\n      loading: false,\n      data: result\n    })\n  }\n\n  return { search, ...state }\n}\n\nasync function loadCountries() {\n  if (navigator.onLine) {\n    const res = await fetch('https://restcountries.eu/rest/v2/all')\n    const countries = await res.json()\n    saveCountries(countries) // no await\n    return countries\n  } else {\n    return await db.countries.toArray()\n  }\n}\n\nasync function saveCountries(countries) {\n  await db.countries.clear()\n  await db.countries.bulkAdd(countries)\n  console.log('end saveCountries')\n}\n\nexport default useCountries","import React from 'react';\nimport useCountries from './useCountries'\nimport './App.css';\n\nfunction App() {\n  const { loading, data, search } = useCountries()\n  \n  return (\n    <main>\n      <h2>PWA Demo</h2>\n\n      <div className=\"card\">\n        <input placeholder=\"Buscar...\" onChange={search} />\n      </div>\n\n      <div className=\"card\">\n        {loading &&\n          'Loading...'\n        }\n\n        {(!loading && data.length === 0) &&\n          'Could not load data'\n        }\n\n        {data.length > 0 &&\n          <CountriesTable countries={data} />\n        }\n\n      </div>\n    </main>\n  );\n}\n\nfunction CountriesTable({ countries }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Region</th>\n          <th>Name</th>\n          <th>Capital</th>\n        </tr>\n      </thead>\n      <tbody>\n        {countries.map((country, i) =>\n          <tr key={i}>\n            <td>{i + 1}</td>\n            <td>{country.region}</td>\n            <td>{country.name}</td>\n            <td>{country.capital}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}