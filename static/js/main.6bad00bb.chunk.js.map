{"version":3,"sources":["db.js","useCountries.js","App.js","useProducts.js","AppProducts.js","useUnits.js","AppUnits.js","serviceWorker.js","index.js"],"names":["db","Dexie","version","stores","countries","units","products","LIMIT","a","count","navigator","onLine","fetch","cache","res","json","document","querySelector","textContent","length","saveCountries","limit","toArray","clear","bulkAdd","console","log","useCountries","useState","loading","data","state","setState","useEffect","loadCountries","then","search","event","val","text","currentTarget","value","where","startsWithIgnoreCase","or","result","CountriesTable","map","country","i","key","region","name","capital","colSpan","App","className","placeholder","onChange","id","saveProducts","useProducts","loadProducts","ProductsTable","product","c_ClaveProdServ","Descripción","saveUnits","useUnits","loadUnits","UnitsTable","unit","c_ClaveUnidad","Nombre","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","hash","path","setPath","linkProps","href","onClick","delete","reload","AppUnits","AppProducts","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6bad00bb.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('pwa-demo');\ndb.version(1).stores({\n    countries: '++id, numericCode, name, capital, region, *altSpellings'\n});\n\ndb.version(2).stores({\n    units: 'c_ClaveUnidad, Nombre'\n});\n\ndb.version(3).stores({\n    products: 'c_ClaveProdServ, Descripción'\n});\n\nexport default db;","import { useState, useEffect } from 'react';\nimport db from './db'\n\nconst LIMIT = 50\n\nfunction useCountries() {\n  const [state, setState] = useState({\n    loading: true,\n    data: []\n  })\n\n  useEffect(() => {\n    loadCountries().then(countries => {\n      setState({\n        loading: false,\n        data: countries\n      })\n    })\n  }, [])\n\n  const search = async (event, val) => {\n    const text = event.currentTarget.value || ''\n\n    const result = await db.countries\n      .where('name')\n      .startsWithIgnoreCase(text)\n      .or('region')\n      .startsWithIgnoreCase(text)\n      .or('capital')\n      .startsWithIgnoreCase(text)\n      .limit(LIMIT)\n      .toArray()\n\n    setState({\n      loading: false,\n      data: result\n    })\n  }\n\n  return { search, ...state }\n}\n\nasync function loadCountries() {\n  if (await db.countries.count() === 0 && navigator.onLine) {\n    const url = 'https://restcountries.eu/rest/v2/all'\n    const res = await fetch(url, { cache: 'no-cache' })\n    const countries = await res.json()\n    document.querySelector('#message').textContent = `Guardando ${countries.length} registros...`\n    await saveCountries(countries)\n  }\n\n  return await db.countries.limit(LIMIT).toArray()\n}\n\nasync function saveCountries(countries) {\n  await db.countries.clear()\n  await db.countries.bulkAdd(countries)\n  console.log('end saveCountries')\n}\n\nexport default useCountries","import React from 'react';\nimport useCountries from './useCountries'\nimport './App.css';\n\nfunction App() {\n  const { loading, data, search } = useCountries()\n  \n  return (\n    <main>\n      <h2>PWA Demo</h2>\n\n      <div className=\"card\">\n        <input placeholder=\"Buscar...\" onChange={search} />\n      </div>\n\n      <div className=\"card\">\n        {loading &&\n          <div id=\"message\" className=\"p\">\n            Cargando...\n          </div>\n        }\n\n        {(!loading && data.length === 0) &&\n          <div className=\"p\">\n            No se pudieron cargar los datos\n          </div>\n        }\n\n        {data.length > 0 &&\n          <CountriesTable countries={data} />\n        }\n\n      </div>\n    </main>\n  );\n}\n\nfunction CountriesTable({ countries }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Region</th>\n          <th>Name</th>\n          <th>Capital</th>\n        </tr>\n      </thead>\n      <tbody>\n        {countries.map((country, i) =>\n          <tr key={i}>\n            <td>{i + 1}</td>\n            <td>{country.region}</td>\n            <td>{country.name}</td>\n            <td>{country.capital}</td>\n          </tr>\n        )}\n        { countries.length >= 50 &&\n          <tr>\n            <td colSpan=\"4\">\n              Solo se muestran 50 resultados\n            </td>\n          </tr>\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport db from './db'\n\nconst LIMIT = 50\n\nfunction useProducts() {\n  const [state, setState] = useState({\n    loading: 'Cargando...',\n    data: []\n  })\n\n  useEffect(() => {\n    loadProducts().then(products => {\n      setState({\n        loading: false,\n        data: products\n      })\n    })\n  }, [])\n\n  const search = async (event) => {\n    const text = event.currentTarget.value || ''\n\n    const products = await db.products\n      // .filter(unit => \n      //   unit.c_ClaveUnidad.includes(text) || \n      //   unit.Nombre.includes(text)\n      // )\n      .where('c_ClaveProdServ')\n      .startsWithIgnoreCase(text)\n      .or('Descripción')\n      .startsWithIgnoreCase(text)\n      .limit(LIMIT)\n      .toArray()\n\n    setState({\n      loading: false,\n      data: products\n    })\n  }\n\n  return { search, ...state }\n}\n\nasync function loadProducts() {\n  if (await db.products.count() === 0 && navigator.onLine) {\n    const url = 'https://jonaduran.github.io/pwa-demo/c_ClaveProdServ.json'\n    const res = await fetch(url, { cache: 'no-cache' })\n    const products = await res.json()\n    document.querySelector('#message').textContent = `Guardando ${products.length} registros...`\n    await saveProducts(products)\n  }\n\n  return await db.products.limit(LIMIT).toArray()\n}\n\nasync function saveProducts(products) {\n  await db.products.clear()\n  await db.products.bulkAdd(products)\n}\n\nexport default useProducts","import React from 'react';\nimport useProducts from './useProducts'\nimport './App.css';\n\nfunction App() {\n  const { loading, data, search } = useProducts()\n  \n  return (\n    <main>\n      <h2>Catálogo de Productos y Servicios</h2>\n\n      <div className=\"card\">\n        <input placeholder=\"Buscar...\" onChange={search} />\n      </div>\n\n      <div className=\"card\">\n        {loading &&\n          <div id=\"message\" className=\"p\">\n            Cargando...\n          </div>\n        }\n\n        {(!loading && data.length === 0) &&\n          <div className=\"p\">\n            No se pudieron cargar los datos\n          </div>\n        }\n\n        {data.length > 0 &&\n          <ProductsTable products={data} />\n        }\n\n      </div>\n    </main>\n  );\n}\n\nfunction ProductsTable({ products }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Clave</th>\n          <th>Descripción</th>\n        </tr>\n      </thead>\n      <tbody>\n        {products.map((product, i) =>\n          <tr key={i}>\n            <td>{i + 1}</td>\n            <td>{product.c_ClaveProdServ}</td>\n            <td>{product.Descripción}</td>\n          </tr>\n        )}\n        { products.length >= 50 &&\n          <tr>\n            <td colSpan=\"3\">\n              Solo se muestran 50 resultados\n            </td>\n          </tr>\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport db from './db'\n\nconst LIMIT = 50\n\nfunction useUnits() {\n  const [state, setState] = useState({\n    loading: true,\n    data: []\n  })\n\n  useEffect(() => {\n    loadUnits().then(units => {\n      setState({\n        loading: false,\n        data: units\n      })\n    })\n  }, [])\n\n  const search = async (event) => {\n    const text = event.currentTarget.value || ''\n\n    const units = await db.units\n      // .filter(unit => \n      //   unit.c_ClaveUnidad.includes(text) || \n      //   unit.Nombre.includes(text)\n      // )\n      .where('c_ClaveUnidad')\n      .startsWithIgnoreCase(text)\n      .or('Nombre')\n      .startsWithIgnoreCase(text)\n      .limit(LIMIT)\n      .toArray()\n\n    setState({\n      loading: false,\n      data: units\n    })\n  }\n\n  return { search, ...state }\n}\n\nasync function loadUnits() {\n  if (await db.units.count() === 0 && navigator.onLine) {\n    const url = 'https://jonaduran.github.io/pwa-demo/c_ClaveUnidad.json'\n    const res = await fetch(url, { cache: 'no-cache' })\n    const units = await res.json()\n    document.querySelector('#message').textContent = `Guardando ${units.length} registros...`\n    await saveUnits(units)\n  }\n\n  return await db.units.limit(LIMIT).toArray()\n}\n\nasync function saveUnits(units) {\n  await db.units.clear()\n  await db.units.bulkAdd(units)\n}\n\nexport default useUnits","import React from 'react';\nimport useUnits from './useUnits'\nimport './App.css';\n\nfunction App() {\n  const { loading, data, search } = useUnits()\n  \n  return (\n    <main>\n      <h2>Catálogo de Unidades</h2>\n\n      <div className=\"card\">\n        <input placeholder=\"Buscar...\" onChange={search} />\n      </div>\n\n      <div className=\"card\">\n        {loading &&\n          <div id=\"message\" className=\"p\">\n            Cargando...\n          </div>\n        }\n\n        {(!loading && data.length === 0) &&\n          <div className=\"p\">\n            No se pudieron cargar los datos\n          </div>\n        }\n\n        {data.length > 0 &&\n          <UnitsTable units={data} />\n        }\n\n      </div>\n    </main>\n  );\n}\n\nfunction UnitsTable({ units }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Clave</th>\n          <th>Nombre</th>\n        </tr>\n      </thead>\n      <tbody>\n        {units.map((unit, i) =>\n          <tr key={i}>\n            <td>{i + 1}</td>\n            <td>{unit.c_ClaveUnidad}</td>\n            <td>{unit.Nombre}</td>\n          </tr>\n        )}\n\n        { units.length >= 50 &&\n          <tr>\n            <td colSpan=\"3\">\n              Solo se muestran 50 resultados\n            </td>\n          </tr>\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppProducts from './AppProducts';\nimport AppUnits from './AppUnits';\nimport * as serviceWorker from './serviceWorker';\nimport db from './db';\n\nfunction Index() {\n  const [path, setPath] = useState(window.location.hash)\n\n  const linkProps = (key) => ({\n    href: '#' + key,\n    onClick: () => setPath('#' + key)\n  })\n\n  if (path === '#clear') {\n    db.delete()\n    window.location.hash = ''\n    window.location.reload()\n  }\n\n  return (\n    <main>\n      {!path &&\n        <h3>\n          Seleccione una opción\n        </h3>\n      }\n      <div id=\"menu\">\n        <a {...linkProps('countries')}>Países</a>\n        <a {...linkProps('units')}>Unidades</a>\n        <a {...linkProps('products')}>Productos</a>\n        <a {...linkProps('clear')}>Borrar caché</a>\n      </div>\n      {path === '#countries' && <App />}\n      {path === '#units' && <AppUnits />}\n      {path === '#products' && <AppProducts />}\n    </main>\n  )\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}