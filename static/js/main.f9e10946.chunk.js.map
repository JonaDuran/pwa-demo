{"version":3,"sources":["db.js","useProducts.js","AppProducts.js","serviceWorker.js","index.js"],"names":["db","Dexie","version","stores","countries","units","products","LIMIT","a","count","navigator","onLine","fetch","cache","res","json","saveProducts","limit","toArray","clear","bulkAdd","useProducts","useState","loading","data","state","setState","useEffect","loadProducts","then","search","event","text","currentTarget","value","where","startsWithIgnoreCase","or","ProductsTable","map","product","i","key","c_ClaveProdServ","Descripción","App","className","placeholder","onChange","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","AppProducts","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9e10946.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('pwa-demo');\ndb.version(1).stores({\n    countries: '++id, numericCode, name, capital, region, *altSpellings'\n});\n\ndb.version(2).stores({\n    units: 'c_ClaveUnidad, Nombre'\n});\n\ndb.version(3).stores({\n    products: 'c_ClaveProdServ, Descripción'\n});\n\nexport default db;","import { useState, useEffect } from 'react';\nimport db from './db'\n\nconst LIMIT = 50\n\nfunction useProducts() {\n  const [state, setState] = useState({\n    loading: true,\n    data: []\n  })\n\n  useEffect(() => {\n    loadProducts().then(products => {\n      setState({\n        loading: false,\n        data: products\n      })\n    })\n  }, [])\n\n  const search = async (event) => {\n    const text = event.currentTarget.value || ''\n\n    const products = await db.products\n      // .filter(unit => \n      //   unit.c_ClaveUnidad.includes(text) || \n      //   unit.Nombre.includes(text)\n      // )\n      .where('c_ClaveProdServ')\n      .startsWithIgnoreCase(text)\n      .or('Descripción')\n      .startsWithIgnoreCase(text)\n      .limit(LIMIT)\n      .toArray()\n\n    setState({\n      loading: false,\n      data: products\n    })\n  }\n\n  return { search, ...state }\n}\n\nasync function loadProducts() {\n  if (await db.products.count() === 0 && navigator.onLine) {\n    const url = 'https://jonaduran.github.io/pwa-demo/c_ClaveProdServ.json'\n    const res = await fetch(url, { cache: 'no-cache' })\n    const products = await res.json()\n    await saveProducts(products) // no await\n  }\n\n  return await db.products.limit(LIMIT).toArray()\n}\n\nasync function saveProducts(products) {\n  await db.products.clear()\n  await db.products.bulkAdd(products)\n}\n\nexport default useProducts","import React from 'react';\nimport useProducts from './useProducts'\nimport './App.css';\n\nfunction App() {\n  const { loading, data, search } = useProducts()\n  \n  return (\n    <main>\n      <h2>Catálogo de Productos y Servicios</h2>\n\n      <div className=\"card\">\n        <input placeholder=\"Buscar...\" onChange={search} />\n      </div>\n\n      <div className=\"card\">\n        {loading &&\n          'Cargando...'\n        }\n\n        {(!loading && data.length === 0) &&\n          'No se pudieron cargar los datos'\n        }\n\n        {data.length > 0 &&\n          <ProductsTable products={data} />\n        }\n\n      </div>\n    </main>\n  );\n}\n\nfunction ProductsTable({ products }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Clave</th>\n          <th>Descripción</th>\n        </tr>\n      </thead>\n      <tbody>\n        {products.map((product, i) =>\n          <tr key={i}>\n            <td>{i + 1}</td>\n            <td>{product.c_ClaveProdServ}</td>\n            <td>{product.Descripción}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppProducts from './AppProducts';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppProducts />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}